- Observer pattern voor validaties naar messages -> checks worden pas uitgevoerd wanneer de docent iets live gaat maken, 
daarvoor is het simpelweg een list van messages -> checkLogic in elke controller? Door observer auto call bij elke wijziging?

Exception handling en unit tests schrijven:
- https://auth0.com/blog/exception-handling-and-i18n-on-spring-boots-apis/
- Naast restcontroller test, ook service test en controller test? -> tests afronden
- https://www.baeldung.com/spring-boot-bean-validation
- https://mkyong.com/spring-boot/spring-rest-validation-example/

- Interfaces en huidige patterns & Solid principes nalopen
 - https://codeburst.io/understanding-solid-principles-interface-segregation-principle-b2d57026cf6c
 - https://stackify.com/interface-segregation-principle/
- Applicatie uitbreiden met meer domein-entiteiten

Functionaliteit/Requirements implementeren:
- De EVL-beschrijving (Modulebeschrijving EVL OOSE.docx). Idealiter kunnen we deze met de ICDE-tool genereren
- De toetsplanning in Excel (toetsrooster-oosedt.xlsx) en als plaatje (globale-planning-voor-studenten.png), deze willen we ook kunnen genereren maar ook waarschuwingen inbouwen als er meer dan 3 toetsen/opdrachten tegelijk in 1 week lopen.
- De lesplanning (Lesplanning-1819.xlsx). Hier zie je (vooral voor de eerste weken) een koppeling van een les aan rubrics. We willen met de ICDE-tool kunnen valideren of de lessen 100% aansluiten bij de toetsen/opdrachten die we geven. Elke toets/opdracht wordt beoordeeld op basis van beoordelingscriteria, deze criteria hebben we ook aan de lessen hangen. De tool zou kunnen checken of we wel voor alle toetsen lessen hebben en andersom.

- Add and Map Error pages
- Implement page layout -> https://www.thymeleaf.org/doc/articles/layouts.html
- https://www.tutorialspoint.com/spring_boot/spring_boot_file_handling.htm -> File upload ook in requirements en implementeren

Refactor het onderstaande (of het is toegepast):
- https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/
- Je kent verschillende manieren om software in grotere modules te verdelen zoals het gebruik van components, layer pattern en principes zoals high cohesion en low coupling.
- Exceptions nalopen en uitbreiden/toevoegen -> verwerken in Service en bijbehorende Interface?
 - https://auth0.com/blog/exception-handling-and-i18n-on-spring-boots-apis/ -> global exceptions + i18n + Oauth en spring sec. voor API

- Nog een aantal componenten toevoegen
- https://itnext.io/solid-principles-explanation-and-examples-715b975dcad4 -> Refactoren
- Alles testen, nalopen en checken op verbeterpunten
- Werkend product voor toevoegen opleiding met EVL's en lessen
- Alle overige componenten toevoegen en het product afronden
- https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api -> Geavanceerde gedeelte doornemen (minimaal Bean Validation implementatie afronden)

# spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
# https://www.baeldung.com/spring-boot-failed-to-configure-data-source
# https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm

# ToDo -> exception handling voor de API uitbreiden
# @ControllerAdvice
# @ExceptionHandler
# https://www.tutorialspoint.com/spring_boot/spring_boot_exception_handling.htm
# Interceptor? -> https://www.tutorialspoint.com/spring_boot/spring_boot_interceptor.htm
# Filter? -> https://www.tutorialspoint.com/spring_boot/spring_boot_servlet_filter.htm

- Test gui with junit? Selenium buiten scope
- Jenkins voor oplevering?
- JAR packagen als finaal product + branch merges volgens gitflow -> https://spring.io/guides/gs/accessing-data-mysql/

- Technisch Ontwerp starten
- Functioneel Ontwerp starten
- Domein model maken voor de use case + SD maken voor use case