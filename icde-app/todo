 - Velden toevoegen Evl en Semester -> ook in GUI
 
 - Terug knop vanuit add/edit etc.
 - Implement page layout -> https://www.thymeleaf.org/doc/articles/layouts.html

- Exceptions nalopen en uitbreiden/toevoegen -> verwerken in Service en bijbehorende Interface? 
- Global exceptions + i18n + Oauth en spring sec. voor API + refactoren
- Exception handling en unit tests schrijven:
- Naast restcontroller test, ook service test en controller test? -> tests afronden
- Interfaces en huidige patterns & Solid principes nalopen

- Implementeren aan elkaar koppelen van objecten
- Change listener voor overzicht recent toegevoegd als patroon -> changelogger view (ChangePropertyListener)
- Views maken zoals onderwijsonline

### Business Logic implementatie ###
- Elke actie welke via service gaat, roept op het betreffende object de logic check aan
 - LogicCheck geeft een message-list terug met daarin de problemen of het probleem en slaat dit bij het object op
 - Dit wordt in de GUI weergegeven in een losse kolom
 - Declare interface welke checkLogic afdwingt -> of abstracte klasse?
  
- Applicatie uitbreiden met meer domein-entiteiten
- De EVL-beschrijving (Modulebeschrijving EVL OOSE.docx). Idealiter kunnen we deze met de ICDE-tool genereren
- De toetsplanning in Excel (toetsrooster-oosedt.xlsx) en als plaatje (globale-planning-voor-studenten.png), deze willen we ook kunnen genereren maar ook waarschuwingen inbouwen als er meer dan 3 toetsen/opdrachten tegelijk in 1 week lopen.
- De lesplanning (Lesplanning-1819.xlsx). Hier zie je (vooral voor de eerste weken) een koppeling van een les aan rubrics. We willen met de ICDE-tool kunnen valideren of de lessen 100% aansluiten bij de toetsen/opdrachten die we geven. Elke toets/opdracht wordt beoordeeld op basis van beoordelingscriteria, deze criteria hebben we ook aan de lessen hangen. De tool zou kunnen checken of we wel voor alle toetsen lessen hebben en andersom.

- Add and Map Error pages (link naar niet bestaande pagina om aan te tonen)
- https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api -> Geavanceerde gedeelte doornemen (minimaal Bean Validation implementatie afronden)
- Alles testen, nalopen en checken op verbeterpunten
- Werkend product voor toevoegen opleiding met EVL's en lessen
- Alle overige componenten toevoegen en het product afronden


### Afronden ###
- Test gui with junit? Selenium buiten scope
- Jenkins voor oplevering?
- JAR packagen als finaal product + branch merges volgens gitflow -> https://spring.io/guides/gs/accessing-data-mysql/
- Technisch Ontwerp starten
- Functioneel Ontwerp starten
- Domein model maken voor de use case + SD maken voor use case
