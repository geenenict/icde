- Factory pattern -> https://www.baeldung.com/javax-validation

- Auto H2 in mem database ook bij document uitschrijven -> https://www.tutorialspoint.com/spring_boot/spring_boot_introduction.htm
- https://deviq.com/solid/
- Observer pattern -> lijst bijhouden van messages qua validatie -> wanneer de docent de opleiding live gaat maken dan moeten de messages leeg zijn -> checkLogica in elke controller. Deze worden aangeroepen door de observer bij elke wijziging
- Factory voor validatie
- https://www.tutorialspoint.com/spring_boot/spring_boot_application_properties.htm -> Application Properties uitleggen (verschillende voor prod en ont)
- http://oosedt.wiki.icaprojecten.nl/confluence/pages/viewpage.action?spaceKey=~MMT.Abrahams@student.han.nl&title=grading+request+design+document+casus+v2
- https://www.tutorialspoint.com/spring_boot/spring_boot_file_handling.htm -> File upload ook in requirements en implementeren
- AJAX implementatie + viewcontroller -> https://www.tutorialspoint.com/spring_boot/spring_boot_consuming_restful_web_services.htm
- CORS security layer -> https://www.tutorialspoint.com/spring_boot/spring_boot_cors_support.htm
- Naast restcontroller test, ook service test en controller test? -> tests afronden
- Swagger api auto koppeling implementeren -> REST API conform richtlijn maken en start Swagger / Postman -> https://www.tutorialspoint.com/spring_boot/spring_boot_enabling_swagger2.htm
- Google Cloud SQL beslissing nemen (https://www.tutorialspoint.com/spring_boot/spring_boot_google_cloud_platform.htm) 
  + MySQL koppelen i.p.v. H2 -> https://www.tutorialspoint.com/spring_boot/spring_boot_flyway_database.htm 
  + https://www.tutorialspoint.com/spring_boot/spring_boot_database_handling.htm

- Observer pattern voor validaties naar messages + Factory pattern voor Domein beperkingen op velden
- Login implementeren -> https://www.tutorialspoint.com/spring_boot/spring_boot_securing_web_applications.htm
 - Google Login met Oauth 
  + https://www.tutorialspoint.com/spring_boot/spring_boot_google_oauth2_sign_in.htm
  + Vastleggen verdere mogelijkheden -> https://www.tutorialspoint.com/spring_boot/spring_boot_oauth2_with_jwt.htm
  + Oauth adapter pattern
  + Spring Security -> https://springframework.guru/spring-boot-web-application-part-2-using-thymeleaf/ 
  + https://springframework.guru/using-the-h2-database-console-in-spring-boot-with-spring-security/



Functionaliteit/Requirements implementeren:
- De EVL-beschrijving (Modulebeschrijving EVL OOSE.docx). Idealiter kunnen we deze met de ICDE-tool genereren
- De toetsplanning in Excel (toetsrooster-oosedt.xlsx) en als plaatje (globale-planning-voor-studenten.png), deze willen we ook kunnen genereren maar ook waarschuwingen inbouwen als er meer dan 3 toetsen/opdrachten tegelijk in 1 week lopen.
- De lesplanning (Lesplanning-1819.xlsx). Hier zie je (vooral voor de eerste weken) een koppeling van een les aan rubrics. We willen met de ICDE-tool kunnen valideren of de lessen 100% aansluiten bij de toetsen/opdrachten die we geven. Elke toets/opdracht wordt beoordeeld op basis van beoordelingscriteria, deze criteria hebben we ook aan de lessen hangen. De tool zou kunnen checken of we wel voor alle toetsen lessen hebben en andersom.

- Add and Map Error pages
- Implement page layout -> https://www.thymeleaf.org/doc/articles/layouts.html

Refactor het onderstaande (of het is toegepast):
- https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/
- Je kent verschillende manieren om software in grotere modules te verdelen zoals het gebruik van components, layer pattern en principes zoals high cohesion en low coupling.
- Exceptions nalopen en uitbreiden/toevoegen -> verwerken in Service en bijbehorende Interface?
 - https://auth0.com/blog/exception-handling-and-i18n-on-spring-boots-apis/ -> global exceptions + i18n + Oauth en spring sec. voor API

- Nog een aantal componenten toevoegen
- https://itnext.io/solid-principles-explanation-and-examples-715b975dcad4 -> Refactoren
- Alles testen, nalopen en checken op verbeterpunten
- Werkend product voor toevoegen opleiding met EVL's en lessen
- Alle overige componenten toevoegen en het product afronden

- Test gui with junit? Selenium buiten scope
- Jenkins voor oplevering?
- JAR packagen als finaal product + branch merges volgens gitflow

- Technisch Ontwerp starten
- Functioneel Ontwerp starten
- Domein model maken voor de use case + SD maken voor use case